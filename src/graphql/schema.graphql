## DEVELOPER TYPES

type Developer {
  id: ID
  name: String
  email: String
}

input NewDeveloper {
  name: String! 
  email: String!
}

input UpdateDeveloper {
  id: ID!
  name: String 
  email: String
}

type Query {
  AllDevelopers: [Developer!]!
  Developer(id: ID!): Developer
}

type Mutation {
  createDeveloper(input: NewDeveloper!): Developer!
  updateDeveloper(input: UpdateDeveloper!): Developer
  deleteDeveloper(id: ID!): Developer
}

type Subscription {
  developerCreated: Developer
}

## SPECIALITY TYPES

type Speciality {
  id: ID
  name: String
}

input NewSpeciality {
  name: String!
}

input UpdateSpeciality {
  id: ID!
  name: String
}

type Query {
  AllSpecialities: [Speciality!]!
  Speciality(id: ID!): Speciality
}

type Mutation {
  createSpeciality(input: NewSpeciality!): Speciality!
  updateSpeciality(input: UpdateSpeciality!): Speciality
  deleteSpeciality(id: ID!): Speciality
}

type Subscription {
  specialityCreated: Speciality
}

## PROJECT TYPES

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
}

type Project {
  id: ID!
  name: String 
  description: String
  status: String
}

input NewProject {
  name: String! 
  description: String!
}

input UpdateProject {
  id: ID!
  name: String 
  description: String
  status: ProjectStatus
}

type Query {
  AllProjects: [Project!]!
  Project(id: ID!): Project
}

type Mutation {
  createProject(input: NewProject!): Project!
  updateProject(input: UpdateProject!): Project
  deleteProject(id: ID!): Project
}

type Subscription {
  projectCreated: Project
}
